name: CI_RUN

trigger: 
  branches:
    include:
    - main
  paths:
    include:
    - apps/shell
    - apps/home-spa
    - apps/login_spa

variables:
  CI: 'true'
  ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
    NX_BRANCH: $(System.PullRequest.PullRequestNumber)
    TARGET_BRANCH: $[replace(variables['System.PullRequest.TargetBranch'],'refs/heads/','origin/')]
    BASE_SHA: $(git merge-base $(TARGET_BRANCH) HEAD)
  ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
    NX_BRANCH: $(Build.SourceBranchName)
    BASE_SHA: $(git rev-parse HEAD~1)
  HEAD_SHA: $(git rev-parse HEAD)
  pnpm_config_cache: '$(System.DefaultWorkingDirectory)/.pnpm-store'


jobs:
  - job: Setup_CI_And_Dependencies
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - checkout: self
        fetchDepth: 0
      # Set Azure Devops CLI default settings
      - bash: az devops configure --defaults organization=$(System.TeamFoundationCollectionUri) project=$(System.TeamProject)
        displayName: 'Set default Azure DevOps organization and project'
      # Get last successfull commit from Azure Devops CLI
      - bash: |
          LAST_SHA=$(az pipelines build list --branch $(Build.SourceBranchName) --definition-ids $(System.DefinitionId) --result succeeded --top 1 --query "[0].triggerInfo.\"ci.sourceSha\"")
          if [ -z "$LAST_SHA" ]
          then
            echo "Last successful commit not found. Using fallback 'HEAD~1': $BASE_SHA"
          else
            echo "Last successful commit SHA: $LAST_SHA"
            echo "##vso[task.setvariable variable=BASE_SHA]$LAST_SHA"
          fi
        displayName: 'Get last successful commit SHA'
        condition: ne(variables['Build.Reason'], 'PullRequest')
        env:
          AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)

      - task: Cache@2
        inputs:
          key: '"$(Agent.OS)" | pnpm-lock.yaml'
          path: $(pnpm_config_cache)
          restoreKeys: |
             pnpm |  "$(Agent.OS)"
        displayName: Cache pnpm
        continueOnError: true

      - task: Cache@2
        inputs:
          key: 'my-build-cache | $(Build.SourceBranchName) | pnpm-lock.yaml'
          path: $(Build.SourcesDirectory)/node_modules
          restoreKeys: |
             my-build-cache | $(Build.SourceBranchName)
        displayName: Cache node_modules
        continueOnError: true
      
      - script: |
         npm install --prefix=$HOME/.local -g pnpm@9.7.1 
         pnpm config set store-dir $(pnpm_config_cache)
        displayName: Install PNPM

      # This enables task distribution via Nx Cloud
      # Run this command as early as possible, before dependencies are installed
      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun
      - script: pnpm dlx nx-cloud start-ci-run --distribute-on="3 linux-medium-js" --stop-agents-after="build"

      - script: pnpm install --frozen-lockfile
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: 'cp -LR node_modules tmp && rm -rf node_modules && mv tmp node_modules'
    
      - script: git branch --track main origin/main
        condition: eq(variables['Build.Reason'], 'PullRequest')

      # Prepend any command with "nx-cloud record --" to record its logs to Nx Cloud
      - script: pnpm exec nx-cloud record -- echo Starting To Build Apps.
      # Nx Affected runs only tasks affected by the changes in this PR/commit. Learn more: https://nx.dev/ci/features/affected
      # Not working - script: pnpm exec nx affected --base=$(BASE_SHA) --head=$(HEAD_SHA) lint test build
      - script: |
          echo "Checking for changes..."

          # Run the git diff command to check for changes
          changed_files=$(git diff --name-only HEAD^ HEAD)

          # Initialize variables
          shell_changed=false
          login_spa_changed=false
          home_spa_changed=false

          # Check if specific folders have changes
          if echo "$changed_files" | grep -q '^apps/shell/'; then
            echo "Changes detected in apps/shell"
            shell_changed=true
          fi

          if echo "$changed_files" | grep -q '^apps/login_spa/'; then
            echo "Changes detected in apps/login_spa"
            login_spa_changed=true
          fi

          if echo "$changed_files" | grep -q '^apps/home-spa/'; then
            echo "Changes detected in apps/home-spa"
            home_spa_changed=true
          fi

          # Set the variables for later use
          echo "##vso[task.setvariable variable=shellChanged]$shell_changed"
          echo "##vso[task.setvariable variable=loginSpaChanged]$login_spa_changed"
          echo "##vso[task.setvariable variable=homeSpaChanged]$home_spa_changed"
        displayName: 'Check for changes in specific folders'
        
        # Runs Deployment tasks based on changes in apps/shell
      - script: | 
         pnpx nx build shell
        condition: and(succeeded(), eq(variables['shellChanged'], 'true'))
